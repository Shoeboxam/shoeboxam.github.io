(function() {var implementors = {};
implementors["opendp"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/error/struct.Error.html\" title=\"struct opendp::error::Error\">Error</a>","synthetic":true,"types":["opendp::error::Error"]},{"text":"impl Freeze for <a class=\"enum\" href=\"opendp/error/enum.ErrorVariant.html\" title=\"enum opendp::error::ErrorVariant\">ErrorVariant</a>","synthetic":true,"types":["opendp::error::ErrorVariant"]},{"text":"impl&lt;DI, DO&gt; Freeze for <a class=\"struct\" href=\"opendp/core/struct.Function.html\" title=\"struct opendp::core::Function\">Function</a>&lt;DI, DO&gt;","synthetic":true,"types":["opendp::core::Function"]},{"text":"impl&lt;MI, MO&gt; Freeze for <a class=\"struct\" href=\"opendp/core/struct.PrivacyMap.html\" title=\"struct opendp::core::PrivacyMap\">PrivacyMap</a>&lt;MI, MO&gt;","synthetic":true,"types":["opendp::core::PrivacyMap"]},{"text":"impl&lt;MI, MO&gt; Freeze for <a class=\"struct\" href=\"opendp/core/struct.StabilityMap.html\" title=\"struct opendp::core::StabilityMap\">StabilityMap</a>&lt;MI, MO&gt;","synthetic":true,"types":["opendp::core::StabilityMap"]},{"text":"impl&lt;DI, DO, MI, MO&gt; Freeze for <a class=\"struct\" href=\"opendp/core/struct.Measurement.html\" title=\"struct opendp::core::Measurement\">Measurement</a>&lt;DI, DO, MI, MO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DI: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;DO: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;MI: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;MO: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::core::Measurement"]},{"text":"impl&lt;DI, DO, MI, MO&gt; Freeze for <a class=\"struct\" href=\"opendp/core/struct.Transformation.html\" title=\"struct opendp::core::Transformation\">Transformation</a>&lt;DI, DO, MI, MO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DI: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;DO: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;MI: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;MO: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::core::Transformation"]},{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/data/struct.Column.html\" title=\"struct opendp::data::Column\">Column</a>","synthetic":true,"types":["opendp::data::Column"]},{"text":"impl&lt;S, Q, A&gt; Freeze for <a class=\"struct\" href=\"opendp/interactive/struct.Queryable.html\" title=\"struct opendp::interactive::Queryable\">Queryable</a>&lt;S, Q, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::interactive::Queryable"]},{"text":"impl&lt;DI, DO, MI, MO&gt; Freeze for <a class=\"struct\" href=\"opendp/interactive/struct.AcState.html\" title=\"struct opendp::interactive::AcState\">AcState</a>&lt;DI, DO, MI, MO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DI: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;DO: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;MI: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;MO: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DI as <a class=\"trait\" href=\"opendp/core/trait.Domain.html\" title=\"trait opendp::core::Domain\">Domain</a>&gt;::<a class=\"associatedtype\" href=\"opendp/core/trait.Domain.html#associatedtype.Carrier\" title=\"type opendp::core::Domain::Carrier\">Carrier</a>: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;MI as <a class=\"trait\" href=\"opendp/core/trait.Metric.html\" title=\"trait opendp::core::Metric\">Metric</a>&gt;::<a class=\"associatedtype\" href=\"opendp/core/trait.Metric.html#associatedtype.Distance\" title=\"type opendp::core::Metric::Distance\">Distance</a>: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;MO as <a class=\"trait\" href=\"opendp/core/trait.Measure.html\" title=\"trait opendp::core::Measure\">Measure</a>&gt;::<a class=\"associatedtype\" href=\"opendp/core/trait.Measure.html#associatedtype.Distance\" title=\"type opendp::core::Measure::Distance\">Distance</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::interactive::AcState"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"opendp/transformations/struct.Sequential.html\" title=\"struct opendp::transformations::Sequential\">Sequential</a>&lt;T&gt;","synthetic":true,"types":["opendp::transformations::sum::float::Sequential"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"opendp/transformations/struct.Pairwise.html\" title=\"struct opendp::transformations::Pairwise\">Pairwise</a>&lt;T&gt;","synthetic":true,"types":["opendp::transformations::sum::float::Pairwise"]},{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/domains/struct.PolyDomain.html\" title=\"struct opendp::domains::PolyDomain\">PolyDomain</a>","synthetic":true,"types":["opendp::domains::poly::PolyDomain"]},{"text":"impl&lt;D0, D1&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.PairDomain.html\" title=\"struct opendp::domains::PairDomain\">PairDomain</a>&lt;D0, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D0: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::domains::contrib::PairDomain"]},{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.BoxDomain.html\" title=\"struct opendp::domains::BoxDomain\">BoxDomain</a>&lt;D&gt;","synthetic":true,"types":["opendp::domains::contrib::BoxDomain"]},{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.DataDomain.html\" title=\"struct opendp::domains::DataDomain\">DataDomain</a>&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::domains::contrib::DataDomain"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.AllDomain.html\" title=\"struct opendp::domains::AllDomain\">AllDomain</a>&lt;T&gt;","synthetic":true,"types":["opendp::domains::AllDomain"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.BoundedDomain.html\" title=\"struct opendp::domains::BoundedDomain\">BoundedDomain</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::domains::BoundedDomain"]},{"text":"impl&lt;DK, DV&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.MapDomain.html\" title=\"struct opendp::domains::MapDomain\">MapDomain</a>&lt;DK, DV&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DK: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;DV: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::domains::MapDomain"]},{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.VectorDomain.html\" title=\"struct opendp::domains::VectorDomain\">VectorDomain</a>&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::domains::VectorDomain"]},{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.SizedDomain.html\" title=\"struct opendp::domains::SizedDomain\">SizedDomain</a>&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::domains::SizedDomain"]},{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.InherentNullDomain.html\" title=\"struct opendp::domains::InherentNullDomain\">InherentNullDomain</a>&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::domains::InherentNullDomain"]},{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"opendp/domains/struct.OptionNullDomain.html\" title=\"struct opendp::domains::OptionNullDomain\">OptionNullDomain</a>&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["opendp::domains::OptionNullDomain"]},{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/metrics/struct.SymmetricDistance.html\" title=\"struct opendp::metrics::SymmetricDistance\">SymmetricDistance</a>","synthetic":true,"types":["opendp::metrics::SymmetricDistance"]},{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/metrics/struct.InsertDeleteDistance.html\" title=\"struct opendp::metrics::InsertDeleteDistance\">InsertDeleteDistance</a>","synthetic":true,"types":["opendp::metrics::InsertDeleteDistance"]},{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/metrics/struct.ChangeOneDistance.html\" title=\"struct opendp::metrics::ChangeOneDistance\">ChangeOneDistance</a>","synthetic":true,"types":["opendp::metrics::ChangeOneDistance"]},{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/metrics/struct.HammingDistance.html\" title=\"struct opendp::metrics::HammingDistance\">HammingDistance</a>","synthetic":true,"types":["opendp::metrics::HammingDistance"]},{"text":"impl&lt;const P:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.64.0/std/primitive.usize.html\">usize</a>, Q&gt; Freeze for <a class=\"struct\" href=\"opendp/metrics/struct.LpDistance.html\" title=\"struct opendp::metrics::LpDistance\">LpDistance</a>&lt;P, Q&gt;","synthetic":true,"types":["opendp::metrics::LpDistance"]},{"text":"impl&lt;Q&gt; Freeze for <a class=\"struct\" href=\"opendp/metrics/struct.AbsoluteDistance.html\" title=\"struct opendp::metrics::AbsoluteDistance\">AbsoluteDistance</a>&lt;Q&gt;","synthetic":true,"types":["opendp::metrics::AbsoluteDistance"]},{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/metrics/struct.DiscreteDistance.html\" title=\"struct opendp::metrics::DiscreteDistance\">DiscreteDistance</a>","synthetic":true,"types":["opendp::metrics::DiscreteDistance"]},{"text":"impl Freeze for <a class=\"struct\" href=\"opendp/metrics/struct.AgnosticMetric.html\" title=\"struct opendp::metrics::AgnosticMetric\">AgnosticMetric</a>","synthetic":true,"types":["opendp::metrics::AgnosticMetric"]},{"text":"impl&lt;Q&gt; Freeze for <a class=\"struct\" href=\"opendp/measures/struct.MaxDivergence.html\" title=\"struct opendp::measures::MaxDivergence\">MaxDivergence</a>&lt;Q&gt;","synthetic":true,"types":["opendp::measures::MaxDivergence"]},{"text":"impl&lt;Q&gt; Freeze for <a class=\"struct\" href=\"opendp/measures/struct.SmoothedMaxDivergence.html\" title=\"struct opendp::measures::SmoothedMaxDivergence\">SmoothedMaxDivergence</a>&lt;Q&gt;","synthetic":true,"types":["opendp::measures::SmoothedMaxDivergence"]},{"text":"impl&lt;Q&gt; Freeze for <a class=\"struct\" href=\"opendp/measures/struct.SMDCurve.html\" title=\"struct opendp::measures::SMDCurve\">SMDCurve</a>&lt;Q&gt;","synthetic":true,"types":["opendp::measures::SMDCurve"]},{"text":"impl&lt;Q&gt; Freeze for <a class=\"struct\" href=\"opendp/measures/struct.FixedSmoothedMaxDivergence.html\" title=\"struct opendp::measures::FixedSmoothedMaxDivergence\">FixedSmoothedMaxDivergence</a>&lt;Q&gt;","synthetic":true,"types":["opendp::measures::FixedSmoothedMaxDivergence"]},{"text":"impl&lt;Q&gt; Freeze for <a class=\"struct\" href=\"opendp/measures/struct.ZeroConcentratedDivergence.html\" title=\"struct opendp::measures::ZeroConcentratedDivergence\">ZeroConcentratedDivergence</a>&lt;Q&gt;","synthetic":true,"types":["opendp::measures::ZeroConcentratedDivergence"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()