var searchIndex = JSON.parse('{\
"opendp":{"doc":"A library for working with differential privacy.","t":[0,0,0,0,0,14,0,14,0,0,0,0,0,0,0,5,5,5,5,8,16,8,8,16,8,10,10,10,10,5,5,5,5,5,5,5,10,12,12,16,8,16,16,8,3,8,3,8,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,8,3,8,3,3,18,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,4,8,13,13,13,13,6,16,13,13,13,13,13,13,13,13,13,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,12,11,11,11,11,11,11,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,6,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,16,8,8,8,18,18,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,18,18,18,18,18,18,8,8,8,8,8,8,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,5,5,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,0,10,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,8,3,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,12,5,11,11,10,11,11,11,10,11,11,11,11,11,11,10,5,10,5,10,10,10,10,10,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,8,16,8,8,8,8,8,6,6,8,8,16,16,4,8,8,16,13,8,8,13,18,3,8,3,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["accuracy","combinators","core","data","domains","err","error","fallible","interactive","measurements","measures","metrics","poly","traits","transformations","accuracy_to_gaussian_scale","accuracy_to_laplacian_scale","gaussian_scale_to_accuracy","laplacian_scale_to_accuracy","AmplifiableMeasure","Atom","BasicCompositionMeasure","FixDeltaMeasure","FixedMeasure","IsSizedDomain","amplify","compose","fix_delta","get_size","make_basic_composition","make_chain_mt","make_chain_tm","make_chain_tt","make_fix_delta","make_population_amplification","make_zCDP_to_approxDP","new_fixed_measure","0","0","Carrier","DatasetMetric","Distance","Distance","Domain","Function","Measure","Measurement","Metric","PrivacyMap","SensitivityMetric","StabilityMap","Transformation","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","check","check","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eval","eval","eval","eval_poly","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","function","function","function","input_domain","input_domain","input_metric","input_metric","into","into","into","into","into","into_poly","into_poly","into_poly","invoke","invoke","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","make_chain","make_chain","make_chain","map","map","member","new","new","new","new","new","new_fallible","new_fallible","new_fallible","new_from_constant","new_from_constant","output_domain","output_domain","output_measure","output_metric","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","privacy_map","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","shr","shr","shr","stability_map","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Column","IsVec","as_any","as_form","az","borrow","borrow_mut","box_clone","cast_from","checked_as","checked_cast_from","clone","clone_into","eq","eq","fmt","from","from","from_subset","into","into_any","into_form","is_in_subset","is_null","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","subset","subset","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","0","1","AllDomain","BoundedDomain","BoxDomain","CollectionDomain","DataDomain","InherentNull","InherentNullDomain","MapDomain","NULL","OptionNullDomain","PairDomain","SizedDomain","VectorDomain","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","element_domain","element_domain","element_domain","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","form_domain","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get_size","impute_constant","impute_constant","inner_domain","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","key_domain","member","member","member","member","member","member","member","member","member","member","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new_all","new_all","new_closed","option","option","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","size","size","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","value_domain","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","DomainMismatch","Error","ErrorVariant","ExplainUnwrap","FFI","FailedCast","FailedFunction","FailedRelation","Fallible","Inner","InvalidDistance","MakeDomain","MakeMeasurement","MakeTransformation","MeasureMismatch","MetricMismatch","NotImplemented","RelationDebug","TypeParse","az","az","backtrace","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","message","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","shr","shr","shr","to_string","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","unwrap_assert","unwrap_test","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","variant","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","AcState","InteractiveMeasurement","Queryable","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","eval","eval_poly","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","is_null","make_adaptive_composition","new","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","make_alp_histogram_post_process","make_base_alp","make_base_alp_with_hashers","make_base_discrete_gaussian","make_base_discrete_gaussian_rug","make_base_discrete_laplace","make_base_discrete_laplace_cks20","make_base_discrete_laplace_cks20_rug","make_base_discrete_laplace_linear","make_base_gaussian","make_base_geometric","make_base_laplace","make_base_ptr","make_randomized_response","make_randomized_response_bool","post_process","FixedSmoothedMaxDivergence","MaxDivergence","SMDCurve","SmoothedMaxDivergence","ZeroConcentratedDivergence","amplify","amplify","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compose","compose","compose","default","default","default","default","epsilon","eq","eq","eq","eq","fix_delta","fmt","fmt","fmt","fmt","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new_fixed_measure","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","AbsoluteDistance","AgnosticMetric","ChangeOneDistance","DiscreteDistance","HammingDistance","InsertDeleteDistance","IntDistance","L1Distance","L2Distance","LpDistance","SymmetricDistance","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get_stability_constant","get_stability_constant","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","PolyDomain","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","default","eq","fmt","from","from_subset","into","is_in_subset","member","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","AlertingAbs","AlertingAdd","AlertingDiv","AlertingMul","AlertingPow","AlertingSub","Bits","CastInternalReal","CheckNull","DistanceConstant","EXPONENT_BIAS","EXPONENT_BITS","ExactIntBounds","ExactIntCast","FiniteBounds","Float","FloatBits","Hashable","InfAdd","InfCast","InfDiv","InfExp","InfExpM1","InfLn","InfLn1P","InfLog2","InfMul","InfPow","InfSqrt","InfSub","Integer","MANTISSA_BITS","MANTISSA_DIGITS","MAX_CONSECUTIVE","MAX_FINITE","MIN_CONSECUTIVE","MIN_FINITE","Number","Primitive","RoundCast","SaturatingAdd","SaturatingMul","TotalOrd","alerting_abs","alerting_add","alerting_div","alerting_mul","alerting_pow","alerting_sub","exact_int_cast","from_bits","from_raw_components","from_raw_components","inf_add","inf_cast","inf_div","inf_exp","inf_exp_m1","inf_from_internal","inf_into_internal","inf_ln","inf_ln_1p","inf_log2","inf_mul","inf_pow","inf_sqrt","inf_sub","is_null","mantissa","mantissa","max_by","min_by","neg_inf_add","neg_inf_div","neg_inf_exp","neg_inf_exp_m1","neg_inf_from_internal","neg_inf_into_internal","neg_inf_ln","neg_inf_ln_1p","neg_inf_log2","neg_inf_mul","neg_inf_pow","neg_inf_sqrt","neg_inf_sub","raw_exponent","raw_exponent","round_cast","samplers","saturating_add","saturating_mul","sign","sign","to_bits","to_raw_components","to_raw_components","total_clamp","total_clamp","total_cmp","total_ge","total_ge","total_gt","total_gt","total_le","total_le","total_lt","total_lt","total_max","total_max","total_min","total_min","CastInternalRational","GeneratorOpenDP","SampleBernoulli","SampleDiscreteGaussianZ2k","SampleDiscreteLaplaceLinear","SampleDiscreteLaplaceZ2k","SampleGeometric","SampleStandardBernoulli","SampleUniform","SampleUniformInt","SampleUniformIntBelow","Shuffle","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","default","error","fill_bytes","fill_bytes","from","from_rational","from_subset","gen","into","into_rational","is_in_subset","new","next_u32","next_u64","overflowing_as","overflowing_cast_from","sample_bernoulli","sample_discrete_gaussian","sample_discrete_gaussian_Z2k","sample_discrete_laplace","sample_discrete_laplace_Z2k","sample_discrete_laplace_linear","sample_geometric","sample_standard_bernoulli","sample_standard_uniform","sample_uniform_int","sample_uniform_int_below","saturating_as","saturating_cast_from","shuffle","to_subset","to_subset_unchecked","try_fill_bytes","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","AddIsExact","Atom","BAryTreeMetric","CanFloatSumOverflow","CanIntSumOverflow","CountByCategoriesConstant","CountByConstant","DataFrame","DataFrameDomain","DropNullDomain","ImputeConstantDomain","Imputed","Imputed","Interpolation","IsMetricOrdered","IsMonotonic","Item","Linear","LipschitzMulFloatDomain","LipschitzMulFloatMetric","Nearest","ORDERED","Pairwise","SaturatingSum","Sequential","SplitSatSum","SumRelaxation","UncheckedSum","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","choose_branching_factor","error","error","error","float_sum_can_overflow","float_sum_can_overflow","float_sum_can_overflow","from","from","from","from_subset","from_subset","from_subset","get_stability_constant","get_stability_constant","impute_constant","int_sum_can_overflow","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_monotonic","make_b_ary_tree","make_bounded_float_checked_sum","make_bounded_float_ordered_sum","make_bounded_int_monotonic_sum","make_bounded_int_ordered_sum","make_bounded_int_split_sum","make_bounded_sum","make_cast","make_cast_default","make_cast_inherent","make_cdf","make_clamp","make_consistent_b_ary_tree","make_count","make_count_by","make_count_by_categories","make_count_distinct","make_create_dataframe","make_df_cast_default","make_df_is_equal","make_drop_null","make_find","make_find_bin","make_identity","make_impute_constant","make_impute_uniform_float","make_index","make_is_equal","make_is_null","make_lipschitz_float_mul","make_metric_bounded","make_metric_unbounded","make_ordered_random","make_quantiles_from_counts","make_resize","make_select_column","make_sized_bounded_covariance","make_sized_bounded_float_checked_sum","make_sized_bounded_float_ordered_sum","make_sized_bounded_int_checked_sum","make_sized_bounded_int_monotonic_sum","make_sized_bounded_int_ordered_sum","make_sized_bounded_int_split_sum","make_sized_bounded_mean","make_sized_bounded_sum","make_sized_bounded_sum_of_squared_deviations","make_sized_bounded_variance","make_split_dataframe","make_split_lines","make_split_records","make_subset_by","make_unclamp","make_unordered","option","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","relaxation","relaxation","round_up_to_nearest_power_of_two","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_sum","saturating_sum","saturating_sum","split_sat_sum","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unchecked_sum","unchecked_sum","unchecked_sum","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from"],"q":["opendp","","","","","","","","","","","","","","","opendp::accuracy","","","","opendp::combinators","","","","","","","","","","","","","","","","","","opendp::coreopendp::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendp::domainsopendp::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendp::interactive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendp::measurements","","","","","","","","","","","","","","","","opendp::measures","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendp::metricsopendp::poly","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendp::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendp::traits::samplers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendp::transformationsd":["Convert between noise scales and accuracies.","Various combinator constructors.","Core concepts of OpenDP.","Framework for flexible abstract data type model for …","Various implementations of Domain.","create an instance of <code>Error</code>","Error handling utilities.","Create an instance of <code>Fallible</code>","","Various measurement constructors.","Various implementations of Measures (and associated …","Various implementations of Metrics (and associated …","","","Various transformation constructors.","Convert a desired <code>accuracy</code> (tolerance) into a gaussian …","Convert a desired <code>accuracy</code> (tolerance) into a laplacian …","Convert a gaussian scale into an accuracy estimate …","Convert a laplacian scale into an accuracy estimate …","","","","","","","","","","","Construct the DP composition [<code>measurement0</code>, <code>measurement1</code>, …","Construct the functional composition (<code>measurement1</code> ○ …","Construct the functional composition (<code>transformation1</code> ○ …","Construct the functional composition (<code>transformation1</code> ○ …","Fix the delta parameter in the privacy map of a <code>measurement</code>…","Construct an amplified measurement from a <code>measurement</code> with …","Constructs a new output measurement where the output …","","","","The underlying type that the Domain specializes. This is …","An indicator trait that is only implemented for dataset …","","","A set which constrains the input or output of a <code>Function</code>.","A mathematical function which maps values from an input …","A representation of the distance between two distributions.","A randomized mechanism with certain privacy …","A representation of the distance between two elements in a …","A map evaluating the privacy of a <code>Measurement</code>.","An indicator trait that is only implemented for statistic …","A map evaluating the stability of a <code>Transformation</code>.","A data transformation with certain stability …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this Function into one with polymorphic output.","Converts this Measurement into one with polymorphic …","Converts this Transformation into one with polymorphic …","","","","","","","","","","","","","Predicate to test an element for membership in the domain. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Proof Definition","Proof Definition","A Domain that carries an underlying Domain in a Box.","","A Domain that unwraps a Data wrapper.","","Proof Definition","A Domain that contains maps of (homogeneous) values.","","A domain that represents nullity via the Option type.","A Domain that contains pairs of values.","A Domain that specifies the length of the enclosed domain.","A Domain that contains vectors of (homogeneous) values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new BoundedDomain with the given boundstrait for calling unwrap with an explanation. Makes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","use if the None or Err variant is structurally unreachable","use in tests, where panics are acceptable","","","","","","","","","","","","The state of an adaptive composition Queryable.","","A structure tracking the state of an interactive …","","","","","","","","","","","","","Evaluates a query.","Evaluates a polymorphic query and downcasts to the given …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Constructs a Queryable with initial state and transition …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper Measurement. See <code>post_process</code>.","Measurement to compute a DP projection of bounded sparse …","Measurement to compute a DP projection of bounded sparse …","Make a Measurement that adds noise from the …","","Make a Measurement that adds noise from the …","Make a Measurement that adds noise from the …","","Make a Measurement that adds noise from the …","Make a Measurement that adds noise from the gaussian(<code>scale</code>…","Deprecated.  Use <code>make_base_discrete_laplace</code> instead (more …","Make a Measurement that adds noise from the laplace(<code>scale</code>) …","Make a Measurement that uses propose-test-release to …","Make a Measurement that implements randomized response on …","Make a Measurement that implements randomized response on …","Wrap the AlpState in a Queryable object The Queryable …","$<code>(\\\\epsilon, \\\\delta)</code>$-approximate differential privacy.","$<code>\\\\epsilon</code>$-pure differential privacy.","A function mapping from $<code>\\\\delta</code>$ to $<code>\\\\epsilon</code>$.","$<code>\\\\epsilon(\\\\delta)</code>$-approximate differential privacy.","$<code>\\\\rho</code>$-zero concentrated differential privacy.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The absolute distance between two vector-valued aggregates.","A dummy to fill the metric position in postprocessors.","The smallest number of changes to make two equal-length …","Indicates if two elements are equal to each other.","The number of elements that differ between two …","The smallest number of insertions or deletions to make two …","The type that represents the distance between datasets. It …","The $<code>L_1</code>$ distance between two vector-valued aggregates.","The $<code>L_2</code>$ distance between two vector-valued aggregates.","The $<code>L_p</code>$ distance between two vector-valued aggregates.","The smallest number of additions or removals to make two …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A polymorphic Domain. This admits any value of any type …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Computes the absolute value and returns an error if …","Addition that returns an error if overflowing.","Division that returns an error if overflowing.","Multiplication that returns an error if overflowing.","Raising to the power that returns an error if overflowing.","Subtraction that returns an error if overflowing.","","","","A type that can be used as a stability or privacy constant …","","","","Fallible casting where the casted value is equal to the …","Consts representing the maximum and minimum finite …","","","","Performs addition with specified rounding that returns an …","Fallible casting where the casted value rounds towards …","Performs division with specified rounding that returns an …","Exponentiates with specified rounding that returns an …","Exponentiates and subtracts one with specified rounding.","Computes the natural logarithm with specified rounding …","Takes the logarithm and adds one with specified rounding.","Computes the base 2 logarithm with specified rounding that …","Performs multiplication with specified rounding that …","Computes self to the power with specified rounding that …","Computes the square root with specified rounding that …","Performs subtraction with specified rounding that returns …","","","","","","","","","","","Addition that saturates at the numeric bounds instead of …","Multiplication that saturates at the numeric bounds …","TotalOrd is well-defined on types that are Ord on their …","","Returns <code>Ok(self + v)</code> if the result does not overflow, else …","Returns <code>Ok(self / v)</code> if the result does not overflow, else …","Returns <code>Ok(self * v)</code> if the result does not overflow, else …","Returns <code>Ok(self^v)</code> if the result does not overflow, else …","Returns <code>Ok(self - v)</code> if the result does not overflow, else …","","","","","Alerting addition with rounding towards infinity. Returns …","","Alerting division with rounding towards infinity. Returns …","","Alerting exp_m1 with rounding towards infinity. Returns <code>Ok</code> …","","","","Alerting ln_1p with rounding towards infinity. Returns <code>Ok</code> …","","Alerting multiplication with rounding towards infinity. …","","","Alerting subtraction with rounding towards infinity. …","","","","","","Alerting addition with rounding towards -infinity. Returns …","Alerting division with rounding towards -infinity. Returns …","","Alerting exp_m1 with rounding towards -infinity. Returns <code>Ok</code>…","","","","Alerting ln_1p with rounding towards -infinity. Returns <code>Ok</code> …","","Alerting multiplication with rounding towards -infinity. …","","","Alerting subtraction with rounding towards -infinity. …","","","","","Returns <code>self + v</code>, saturating at the relevant high or low …","Returns <code>self * v</code>, saturating at the relevant high or low …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Sample a single bit with arbitrary probability of success","","","","","Sample from the censored two-sided geometric distribution …","Sample from the censored geometric distribution with …","","Returns a random sample from Uniform[0,1).","sample uniformly from [Self::MIN, Self::MAX]","sample uniformly from [0, upper)","","","","","","","","","","","","","","","","","","","","","","","","Utility trait to drop null values from a dataset, …","Utility trait to impute with a constant, regardless of the …","This is the type of <code>Self::Carrier</code> after imputation.","This is the type of <code>Self::Carrier</code> after dropping null.","","","Checks if two elements of type T have the same sign","","","Implemented for any domain that supports multiplication …","Implemented for any metric that supports multiplication …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an approximation to the ideal <code>branching_factor</code> for …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","A function that replaces a potentially-null carrier type …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Expand a vector of counts into a b-ary tree of counts,  …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that casts a vector of data from …","Make a Transformation that casts a vector of data from …","Make a Transformation that casts a vector of data from …","Postprocess a noisy array of float summary counts into a …","(Proof Link)  Make a Transformation that clamps numeric …","Postprocessing transformation that makes a noisy b-ary …","Make a Transformation that computes a count of the number …","Make a Transformation that computes the count of each …","Make a Transformation that computes the number of times …","Make a Transformation that computes a count of the number …","Make a Transformation that constructs a dataframe from a …","Make a Transformation that casts the elements in a column …","Make a Transformation that checks if each element in a …","Make a Transformation that drops null values. <code>DA</code> is one of …","Find the index of a data value in a set of categories.","Make a transformation that finds the bin index in a …","Constructs a <code>Transformation</code> representing the identity …","Make a Transformation that replaces null/None data with …","Make a Transformation that replaces NaN values in Vec&lt;<code>TA</code>&gt; …","Make a transformation that treats each element as an index …","Make a Transformation that checks if each element is equal …","Make a Transformation that checks if each element in a …","Make a transformation that multiplies an aggregate by a …","Make a Transformation that converts the unbounded dataset …","Make a Transformation that converts the bounded dataset …","Make a Transformation that converts the unordered dataset …","Postprocess a noisy array of summary counts into quantiles.","","Make a Transformation that retrieves the column <code>key</code> from a …","","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the mean of bounded …","Make a Transformation that computes the sum of bounded …","Make a Transformation that computes the sum of squared …","Make a Transformation that computes the variance of …","Make a Transformation that splits each record in a String …","Make a Transformation that takes a string and splits it …","Make a Transformation that splits each record in a …","Make a Transformation that subsets a dataframe by a …","Make a Transformation that unclamps numeric data in Vec&lt;<code>T</code>&gt;.","Make a Transformation that converts the ordered dataset …","Standardizes <code>D::Carrier</code> into an <code>Option&lt;D::Imputed&gt;</code>, where …","","","","","","","","","","","","","","","","","","","Method which takes an iterator and generates <code>Self</code> from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,84,0,85,86,84,87,0,0,0,0,0,0,0,84,19,20,13,0,14,15,0,0,0,0,0,0,0,0,0,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,18,18,19,20,8,10,18,19,20,8,10,18,8,10,8,10,8,10,18,19,20,8,10,18,8,10,8,10,18,19,20,8,10,18,19,20,8,10,13,18,19,20,8,10,18,19,20,19,20,8,10,8,10,18,19,20,8,10,18,19,20,8,10,8,18,19,20,8,10,18,19,20,8,10,8,10,10,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,18,19,20,8,10,0,0,28,27,27,27,27,28,27,27,27,27,27,28,27,27,27,27,27,27,28,27,27,27,27,27,27,27,27,28,27,27,27,27,27,27,27,27,27,27,27,27,39,39,0,0,0,0,0,0,0,0,47,0,0,0,0,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,9,37,38,9,37,38,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,36,37,38,36,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,35,32,34,35,9,36,37,38,39,40,41,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,35,9,34,37,38,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,45,35,9,36,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,9,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,35,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,32,34,35,9,36,37,38,39,40,41,49,0,0,0,49,49,49,49,0,88,49,49,49,49,49,49,49,49,49,48,49,48,48,49,48,49,48,49,48,49,48,49,48,49,48,48,49,49,48,48,49,48,49,48,49,48,49,48,48,49,48,49,48,49,48,49,1,1,1,48,49,48,49,48,49,48,49,48,49,48,49,88,88,48,49,48,49,48,48,49,48,49,48,49,0,0,0,52,53,52,53,52,53,52,53,52,53,52,53,52,52,52,53,52,53,52,53,52,53,52,0,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,63,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,56,63,11,56,12,63,11,64,56,12,63,11,12,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,12,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,64,56,12,63,11,0,0,0,0,0,0,0,0,0,0,0,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,66,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,66,67,68,69,70,71,62,72,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,0,89,0,0,0,89,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,90,91,92,91,92,0,0,0,0,0,0,93,94,95,96,97,98,99,89,89,89,65,100,101,102,103,90,90,104,105,106,107,108,109,110,46,89,89,0,0,65,101,102,103,90,90,104,105,106,107,108,109,110,89,89,111,0,112,113,89,89,89,89,89,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,0,0,0,0,0,0,0,0,0,76,76,76,76,76,76,76,76,0,76,76,114,76,76,76,114,76,76,76,76,76,76,115,0,116,0,117,118,119,120,121,122,123,76,76,124,76,76,76,76,76,76,76,76,76,76,76,0,125,0,0,0,0,0,0,0,0,0,126,127,0,0,0,128,81,0,0,81,129,0,0,0,0,0,0,130,131,81,130,131,81,130,131,81,130,131,81,130,131,81,130,131,81,0,128,130,131,132,130,131,130,131,81,130,131,81,133,134,126,135,130,131,81,130,131,81,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,130,131,81,130,131,81,128,128,0,130,131,81,130,131,81,137,130,131,138,130,131,81,130,131,81,125,130,131,81,130,131,81,130,131,81,139,130,131,130,131,81,130,131,81,130,131,81,130,131,81,130,131,81],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[[0,[2,3,4,5]],[0,[2,3,4,5]]],[[1,[[0,[2,3,4,5]]]]]],[[],1],[[[0,[2,3,4,5]],[0,[2,3,4,5]]],[[1,[[0,[2,3,4,5]]]]]],0,0,0,0,0,0,[[6,6],1],[7,1],[[],1],[[],[[1,[6]]]],[[[7,[8]]],[[1,[[8,[9]]]]]],[[8,10],[[1,[8]]]],[[10,8],[[1,[8]]]],[[10,10],[[1,[10]]]],[8,[[1,[8]]]],[[8,6],[[1,[8]]]],[[[8,[11]]],[[1,[[8,[12]]]]]],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[13,13,14,15]]],[[1,[16]]]],[[[10,[13,13,14,14]]],[[1,[16]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[18,[13,13]]],[[18,[13,13]]]],[[[19,[14,15]]],[[19,[14,15]]]],[[[20,[14,14]]],[[20,[14,14]]]],[[[8,[[0,[21,13]],[0,[21,13]],[0,[21,14]],[0,[21,15]]]]],[[8,[[0,[21,13]],[0,[21,13]],[0,[21,14]],[0,[21,15]]]]]],[[[10,[[0,[21,13]],[0,[21,13]],[0,[21,14]],[0,[21,14]]]]],[[10,[[0,[21,13]],[0,[21,13]],[0,[21,14]],[0,[21,14]]]]]],[[]],[[]],[[]],[[]],[[]],[[[18,[13,13]]],1],[[[19,[14,15]]],1],[[[20,[14,14]]],1],[[[18,[13,22]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[18,[[18,[22]]]],[8,[[8,[22]]]],[10,[[10,[22]]]],[[[8,[13,13,14,15]]],1],[[[10,[13,13,14,14]]],1],[[],16],[[],16],[[],16],[[],16],[[],16],[[18,18],[[18,[13,13]]]],[[19,20],[[19,[14,15]]]],[[20,20],[[20,[14,14]]]],[[[8,[13,13,14,15]]],1],[[[10,[13,13,14,14]]],1],[[],[[1,[16]]]],[23,[[18,[13,13]]]],[23,[[19,[14,15]]]],[23,[[20,[14,14]]]],[[13,13,[18,[13,13]],14,15,[19,[14,15]]],[[8,[13,13,14,15]]]],[[13,13,[18,[13,13]],14,14,[20,[14,14]]],[[10,[13,13,14,14]]]],[23,[[18,[13,13]]]],[23,[[19,[14,15]]]],[23,[[20,[14,14]]]],[[],[[19,[14,15]]]],[[],[[20,[14,14]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,10]],[[10,8]],[[10,10]],0,[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],26],[27,1],[[]],[[]],[[]],[[],[[29,[28]]]],[[]],[[],17],[[],17],[27,27],[[]],[26,16],[[27,27],16],[[27,30],31],[[]],[7,27],[[]],[[]],[29,[[29,[26]]]],[27,[[1,[28]]]],[[],16],[27,16],[[[7,[5]]],27],[[]],[[]],[[]],[[]],[7,[[29,[28]]]],[[27,7],27],[[]],[[],17],[[]],[[],24],[[],24],[[],25],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[32,32],[[[34,[[0,[21,33]]]]],[[34,[[0,[21,33]]]]]],[[[35,[[0,[21,13]],[0,[21,13]]]]],[[35,[[0,[21,13]],[0,[21,13]]]]]],[[[9,[[0,[21,13]]]]],[[9,[[0,[21,13]]]]]],[[[36,[[0,[21,13]]]]],[[36,[[0,[21,13]]]]]],[[[37,[[0,[21,13]]]]],[[37,[[0,[21,13]]]]]],[[[38,[[0,[21,13]]]]],[[38,[[0,[21,13]]]]]],[[[39,[[0,[21,13]],[0,[21,13]]]]],[[39,[[0,[21,13]],[0,[21,13]]]]]],[[[40,[[0,[21,13]]]]],[[40,[[0,[21,13]]]]]],[[[41,[[0,[21,13]]]]],[[41,[[0,[21,13]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[[],[[9,[[0,[13,42]]]]]],[[],[[37,[[0,[13,42]]]]]],[[],[[38,[[0,[13,42]]]]]],0,0,0,[[32,32],16],[[[34,[[0,[43,33]]]],34],16],[[[35,[[0,[43,13]],[0,[43,13]]]],35],16],[[[9,[[0,[43,13]]]],9],16],[[[36,[[0,[43,13]]]],36],16],[[[37,[[0,[43,13]]]],37],16],[[[38,[[0,[43,13]]]],38],16],[[[39,[[0,[43,13]],[0,[43,13]]]],39],16],[[[40,[[0,[43,13]]]],40],16],[[[41,[[0,[43,13]]]],41],16],[[32,30],[[24,[44]]]],[[[34,[33]],30],[[24,[44]]]],[[[35,[[0,[5,13]],[0,[5,13]]]],30],31],[[[9,[13]],30],[[24,[44]]]],[[[36,[13]],30],[[24,[44]]]],[[[37,[13]],30],[[24,[44]]]],[[[38,[13]],30],[[24,[44]]]],[[[39,[[0,[5,13]],[0,[5,13]]]],30],31],[[[40,[[0,[5,13]]]],30],31],[[[41,[[0,[5,13]]]],30],31],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[45]]],[[1,[6]]]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[[32,[46]]],[[1,[16]]]],[[[34,[[0,[21,33]]]]],[[1,[16]]]],[[[35,[13,13]]],[[1,[16]]]],[[[9,[13]]],[[1,[16]]]],[[[36,[45]]],[[1,[16]]]],[[[37,[13]]],[[1,[16]]]],[[[38,[13]]],[[1,[16]]]],[[[39,[13,13]]],[[1,[16]]]],[[[40,[13]]],[[1,[16]]]],[[[41,[13]]],[[1,[16]]]],[[[34,[[0,[43,33]]]],34],16],[[[35,[[0,[43,13]],[0,[43,13]]]],35],16],[[[9,[[0,[43,13]]]],9],16],[[[36,[[0,[43,13]]]],36],16],[[[37,[[0,[43,13]]]],37],16],[[[38,[[0,[43,13]]]],38],16],[[[39,[[0,[43,13]],[0,[43,13]]]],39],16],[[[40,[[0,[43,13]]]],40],16],[[[41,[[0,[43,13]]]],41],16],[[],32],[[],[[1,[[34,[33]]]]]],[[13,13],[[35,[13,13]]]],[13,[[9,[13]]]],[[13,6],[[36,[13]]]],[13,[[37,[13]]]],[13,[[38,[13]]]],[[13,13],[[39,[13,13]]]],[[[29,[13]]],[[40,[13]]]],[13,[[41,[13]]]],[[],[[35,[[32,[46]],[32,[46]]]]]],[[],[[9,[[32,[46]]]]]],[[],[[1,[[34,[33]]]]]],[[],[[17,[[0,[47,21]]]]]],[[],[[17,[[0,[46,21]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[7,[[1,[7]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[48,48],16],[[49,49],16],[[48,30],31],[[48,30],31],[[49,30],31],[[49,30],31],[49,48],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[1,[10]],10]],[[[1,[8]],10]],[[[1,[10]],8]],[[],50],[[],50],[[],17],[[],17],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[51],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[52,1],[[[52,[[29,[26]]]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[52,16],[[],[[54,[53]]]],[23,52],[[13,13,14,15],[[53,[13,13,14,15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[1,[[8,[[35,[32,32]],[32,[[52,[0]]]],55,56]]]]]],[[6,[17,[57]],17],[[1,[[8,[[35,[32,32]],[32,[0]],55,56]]]]]],[[6,[7,[[58,[23]]]]],[[1,[[8,[[35,[32,32]],[32,[0]],55,56]]]]]],[[],[[1,[8]]]],[59,[[1,[[8,[[11,[59]]]]]]]],[[],[[1,[[8,[56]]]]]],[[],[[1,[[8,[56]]]]]],[59,[[1,[[8,[[56,[59]]]]]]]],[17,[[1,[[8,[56]]]]]],[[[17,[60]]],[[1,[8]]]],[17,[[1,[[8,[56]]]]]],[[[17,[60]]],[[1,[[8,[56]]]]]],[[[17,[60]]],[[1,[[8,[[35,[32,32]],[35,[32,32]],55,12]]]]]],[[61,16],[[1,[[8,[32,32,62,56]]]]]],[16,[[1,[[8,[[32,[16]],[32,[16]],62,56]]]]]],0,0,0,0,0,0,[[56,6,6],1],[[63,6,6],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[64,64],[[[56,[21]]],[[56,[21]]]],[[[12,[21]]],[[12,[21]]]],[[[63,[21]]],[[63,[21]]]],[[[11,[21]]],[[11,[21]]]],[[]],[[]],[[]],[[]],[[]],[[[56,[[0,[65,3,21]]]],7],1],[[[63,[[0,[65,3,21]]]],7],1],[[[11,[[0,[65,3,21]]]],7],1],[[],56],[[],12],[[],63],[[],11],[64,1],[[56,56],16],[[12,12],16],[[63,63],16],[[11,11],16],[[[12,[21]]],1],[[56,30],[[24,[44]]]],[[12,30],[[24,[44]]]],[[63,30],[[24,[44]]]],[[11,30],[[24,[44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[23,64],[[[12,[21]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[62,62],[72,72],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],66],[[],67],[[],68],[[],69],[[],70],[[],71],[[],62],[[],72],[[66,66],16],[[67,67],16],[[68,68],16],[[69,69],16],[[70,70],16],[[71,71],16],[[62,62],16],[[72,72],16],[[66,30],[[24,[44]]]],[[67,30],[[24,[44]]]],[[68,30],[[24,[44]]]],[[69,30],[[24,[44]]]],[[70,30],[[24,[44]]]],[[71,30],[[24,[44]]]],[[62,30],[[24,[44]]]],[[72,30],[[24,[44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[1,[4]]]],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],17],[[],17],[22,22],[[]],[[],22],[[22,22],16],[[22,30],[[24,[44]]]],[[]],[[]],[[]],[[],16],[22,[[1,[16]]]],[[],22],[[]],[[]],[[]],[[]],[[]],[[],17],[[]],[[],24],[[],24],[[],25],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[16],[16],[[],1],[[],1],[[],1],[[],1],[[],1],[73],[[],73],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],16],[[]],[[]],[74,1],[74,1],[[],1],[[],1],[[],1],[[],1],[73],[[],73],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[],1],0,[[]],[[]],[[],16],[[],16],[[]],[[]],[[]],[[],1],[[],1],[[],[[1,[75]]]],[[],[[1,[16]]]],[[],[[1,[16]]]],[[],[[1,[16]]]],[[],[[1,[16]]]],[[],[[1,[16]]]],[[],[[1,[16]]]],[[],[[1,[16]]]],[[],[[1,[16]]]],[[],1],[[],1],[[],1],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[],76],0,[[],1],[76],[[]],[59],[[]],[76,57],[[]],[[],[[1,[59]]]],[[],16],[[],76],[76,57],[76,77],[[]],[[]],[16,1],[59,[[1,[78]]]],[60,1],[59,[[1,[78]]]],[60,1],[17,1],[[16,17],1],[[],1],[16,1],[[],1],[[],1],[[]],[[]],[[],1],[[],17],[[]],[76,[[24,[79]]]],[[],24],[[],24],[[],25],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[6,6],[6,1],[6,1],[6,1],[6,[[1,[16]]]],[6,[[1,[16]]]],[6,[[1,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[]],[6,[[1,[16]]]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[6,6],[[1,[[10,[[9,[32]],[9,[32]]]]]]]],[6,[[1,[[10,[[9,[34]],32,68,67]]]]]],[6,[[1,[[10,[[9,[34]],32,69,67]]]]]],[[],[[1,[[10,[[9,[34]],32,68,67]]]]]],[[],[[1,[[10,[[9,[34]],32,69,67]]]]]],[[],[[1,[[10,[[9,[34]],32,68,67]]]]]],[[],[[1,[[10,[[9,[34]],32,67]]]]]],[[],[[1,[[10,[[9,[32]],[9,[[38,[32]]]],68,68]]]]]],[[],[[1,[[10,[[9,[32]],[9,[32]],68,68]]]]]],[[],[[1,[[10,[[9,[32]],[9,[[37,[32]]]],68,68]]]]]],[[],[[1,[[10,[[9,[32]],[9,[32]],72,72]]]]]],[[],[[1,[[10,[[9,[[32,[[0,[21,33,46]]]]]],[9,[[34,[[0,[21,33,46]]]]]],68,68]]]]]],[6,[[1,[[10,[[9,[32]],[9,[32]],72,72]]]]]],[[],[[1,[[10,[[9,[32]],32,68,67]]]]]],[[],[[1,[[10,[[9,[32]],[35,[32,32]],68]]]]]],[[7,16],[[1,[[10,[[9,[32]],[9,[32]],68]]]]]],[[],[[1,[[10,[[9,[32]],32,68,67]]]]]],[7,[[1,[[10,[[9,[[9,[[32,[50]]]]]],80,68,68]]]]]],[[],[[1,[[10,[80,80,68,68]]]]]],[[],[[1,[[10,[80,80,68,68]]]]]],[[],[[1,[[10,[9,[9,[32]],68,68]]]]]],[7,[[1,[[10,[[9,[32]],[9,[[38,[[32,[6]]]]]],68,68]]]]]],[7,[[1,[[10,[[9,[32]],[9,[[32,[6]]]],68,68]]]]]],[[],[[1,[10]]]],[[],[[1,[[10,[9,[9,[32]],68,68]]]]]],[[],[[1,[[10,[[9,[[37,[32]]]],[9,[32]],68,68]]]]]],[7,[[1,[[10,[[9,[[32,[6]]]],[9,[32]],68,68]]]]]],[[],[[1,[[10,[[9,[32]],[9,[[32,[16]]]],68,68]]]]]],[[],[[1,[[10,[9,[9,[[32,[16]]]],68,68]]]]]],[[],[[1,[10]]]],[36,[[1,[[10,[36,36]]]]]],[36,[[1,[[10,[36,36]]]]]],[[],[[1,[10]]]],[[7,7,81],[[1,[[10,[[9,[32]],[9,[32]],72,72]]]]]],[6,[[1,[[10,[9,[36,[9]]]]]]]],[[],[[1,[[10,[80,[9,[32]],68,68]]]]]],[[6,6],[[1,[[10,[[36,[[9,[34]]]],32,68,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,68,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,69,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,68,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,68,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,69,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,68,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,67]]]]]],[6,[[1,[[10,[[36,[[9,[34]]]],32,68,67]]]]]],[[6,6],[[1,[[10,[[36,[[9,[34]]]],32,68,67]]]]]],[[[17,[51]],7],[[1,[[10,[[32,[50]],80,68,68]]]]]],[[],[[1,[[10,[[32,[50]],[9,[[32,[50]]]],68,68]]]]]],[[[17,[51]]],[[1,[[10,[[9,[[32,[50]]]],[9,[[9,[[32,[50]]]]]],68,68]]]]]],[[82,[7,[82]]],[[1,[[10,[[80,[82]],[80,[82]],68,68]]]]]],[[],[[1,[[10,[[9,[[34,[[0,[21,33,46]]]]]],[9,[[32,[[0,[21,33,46]]]]]],68,68]]]]]],[[],[[1,[10]]]],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[6,1],[6,1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],83],[[],83],[7],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[],1],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[],25],[[]],[[],83],[[],83],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[6,"Fallible"],[8,"Float"],[8,"Zero"],[8,"One"],[8,"Debug"],[15,"usize"],[3,"Vec"],[3,"Measurement"],[3,"VectorDomain"],[3,"Transformation"],[3,"ZeroConcentratedDivergence"],[3,"SmoothedMaxDivergence"],[8,"Domain"],[8,"Metric"],[8,"Measure"],[15,"bool"],[4,"Option"],[3,"Function"],[3,"PrivacyMap"],[3,"StabilityMap"],[8,"Clone"],[3,"PolyDomain"],[8,"Fn"],[4,"Result"],[3,"TypeId"],[8,"Any"],[3,"Column"],[8,"IsVec"],[3,"Box"],[3,"Formatter"],[6,"Result"],[3,"AllDomain"],[8,"TotalOrd"],[3,"BoundedDomain"],[3,"MapDomain"],[3,"SizedDomain"],[3,"InherentNullDomain"],[3,"OptionNullDomain"],[3,"PairDomain"],[3,"BoxDomain"],[3,"DataDomain"],[8,"Default"],[8,"PartialEq"],[3,"Error"],[8,"CollectionDomain"],[8,"CheckNull"],[8,"InherentNull"],[3,"Error"],[4,"ErrorVariant"],[3,"String"],[15,"str"],[3,"Queryable"],[3,"AcState"],[6,"InteractiveMeasurement"],[6,"L1Distance"],[3,"MaxDivergence"],[15,"u32"],[3,"Rc"],[3,"Rational"],[15,"i32"],[3,"HashSet"],[3,"DiscreteDistance"],[3,"FixedSmoothedMaxDivergence"],[3,"SMDCurve"],[8,"InfAdd"],[3,"LpDistance"],[3,"AbsoluteDistance"],[3,"SymmetricDistance"],[3,"InsertDeleteDistance"],[3,"ChangeOneDistance"],[3,"HammingDistance"],[3,"AgnosticMetric"],[3,"Float"],[8,"FnOnce"],[4,"Ordering"],[3,"GeneratorOpenDP"],[15,"u64"],[3,"Integer"],[3,"Error"],[6,"DataFrameDomain"],[4,"Interpolation"],[8,"Hashable"],[8,"Float"],[8,"FixDeltaMeasure"],[8,"AmplifiableMeasure"],[8,"BasicCompositionMeasure"],[8,"IsSizedDomain"],[8,"ExplainUnwrap"],[8,"FloatBits"],[8,"CastInternalReal"],[8,"ExactIntBounds"],[8,"FiniteBounds"],[8,"AlertingAbs"],[8,"AlertingAdd"],[8,"AlertingDiv"],[8,"AlertingMul"],[8,"AlertingPow"],[8,"AlertingSub"],[8,"ExactIntCast"],[8,"InfCast"],[8,"InfDiv"],[8,"InfExp"],[8,"InfExpM1"],[8,"InfLn"],[8,"InfLn1P"],[8,"InfLog2"],[8,"InfMul"],[8,"InfPow"],[8,"InfSqrt"],[8,"InfSub"],[8,"RoundCast"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"CastInternalRational"],[8,"SampleBernoulli"],[8,"SampleDiscreteGaussianZ2k"],[8,"SampleDiscreteLaplaceZ2k"],[8,"SampleDiscreteLaplaceLinear"],[8,"SampleGeometric"],[8,"SampleStandardBernoulli"],[8,"SampleUniform"],[8,"SampleUniformInt"],[8,"SampleUniformIntBelow"],[8,"Shuffle"],[8,"LipschitzMulFloatDomain"],[8,"ImputeConstantDomain"],[8,"DropNullDomain"],[8,"SumRelaxation"],[8,"IsMetricOrdered"],[3,"Sequential"],[3,"Pairwise"],[8,"CanFloatSumOverflow"],[8,"CountByCategoriesConstant"],[8,"CountByConstant"],[8,"CanIntSumOverflow"],[8,"IsMonotonic"],[8,"SaturatingSum"],[8,"SplitSatSum"],[8,"UncheckedSum"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
