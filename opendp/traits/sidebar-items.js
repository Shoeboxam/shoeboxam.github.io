window.SIDEBAR_ITEMS = {"mod":[["samplers","Traits for sampling from probability distributions."]],"trait":[["AlertingAbs","Fallible absolute value that returns an error if overflowing."],["AlertingAdd","Fallible addition that returns an error if overflowing."],["AlertingDiv","Fallible division that returns an error if overflowing."],["AlertingMul","Fallible multiplication that returns an error if overflowing."],["AlertingPow","Fallibly raise to the power."],["AlertingSub","Fallible subtraction that returns an error if overflowing."],["CheckNull","Checks if a value is null."],["DistanceConstant","A type that can be used as a stability or privacy constant to scale a distance."],["ExactIntBounds","Consts representing the maximum and minimum finite consecutive values."],["ExactIntCast","Fallible casting where the casted value is exactly equal to the original value."],["FiniteBounds","Consts representing the maximum and minimum finite representable values."],["Float","Floating-point types."],["FloatBits","Bitwise consts and decompositions for float types."],["Hashable","The subset of [`Primitive`] types that implement Eq and Hash."],["InfAdd","Fallible addition with specified rounding."],["InfCast","Fallible casting where the casted value rounds towards infinity."],["InfDiv","Fallible division with specified rounding."],["InfExp","Fallible exponentiation with specified rounding."],["InfExpM1","Fallibly exponentiate and subtract one with specified rounding."],["InfLn","Fallible natural logarithm with specified rounding."],["InfLn1P","Fallible logarithm of the (argument plus one) with specified rounding."],["InfLog2","Fallible base-2 logarithm with specified rounding."],["InfMul","Fallible multiplication with specified rounding."],["InfPow","Fallibly raise self to the power with specified rounding."],["InfSqrt","Fallible square root with specified rounding."],["InfSub","Fallible subtraction with specified rounding."],["InherentNull","Defines an example null value inherent to `Self`."],["Integer","The intersection of [`Number`] types and [`Hashable`] types.  This happens to be integers."],["Number","The subset of [`Primitive`] types that have numerical operations."],["Primitive","A shorthand to indicate the set of types that implement the most common traits, like Clone and Debug."],["RoundCast","Fallible casting where the casted value is rounded to nearest."],["SaturatingAdd","Addition that saturates at the numeric bounds instead of overflowing."],["SaturatingMul","Multiplication that saturates at the numeric bounds instead of overflowing."],["TotalOrd","TotalOrd is well-defined on types that are Ord on their non-null values."]]};